/*
 * This file is generated by jOOQ.
 */
package com.jooq.demo.generator.tables;


import com.jooq.demo.generator.Book;
import com.jooq.demo.generator.Indexes;
import com.jooq.demo.generator.Keys;
import com.jooq.demo.generator.tables.records.InfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Info extends TableImpl<InfoRecord> {

    private static final long serialVersionUID = 18180538;

    /**
     * The reference instance of <code>book.info</code>
     */
    public static final Info INFO = new Info();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InfoRecord> getRecordType() {
        return InfoRecord.class;
    }

    /**
     * The column <code>book.info.id</code>.
     */
    public final TableField<InfoRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>book.info.name</code>. 书名
     */
    public final TableField<InfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "书名");

    /**
     * The column <code>book.info.price</code>. 价格
     */
    public final TableField<InfoRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER, this, "价格");

    /**
     * Create a <code>book.info</code> table reference
     */
    public Info() {
        this(DSL.name("info"), null);
    }

    /**
     * Create an aliased <code>book.info</code> table reference
     */
    public Info(String alias) {
        this(DSL.name(alias), INFO);
    }

    /**
     * Create an aliased <code>book.info</code> table reference
     */
    public Info(Name alias) {
        this(alias, INFO);
    }

    private Info(Name alias, Table<InfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Info(Name alias, Table<InfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Info(Table<O> child, ForeignKey<O, InfoRecord> key) {
        super(child, key, INFO);
    }

    @Override
    public Schema getSchema() {
        return Book.BOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INFO_PRIMARY);
    }

    @Override
    public Identity<InfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INFO;
    }

    @Override
    public UniqueKey<InfoRecord> getPrimaryKey() {
        return Keys.KEY_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<InfoRecord>> getKeys() {
        return Arrays.<UniqueKey<InfoRecord>>asList(Keys.KEY_INFO_PRIMARY);
    }

    @Override
    public Info as(String alias) {
        return new Info(DSL.name(alias), this);
    }

    @Override
    public Info as(Name alias) {
        return new Info(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Info rename(String name) {
        return new Info(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Info rename(Name name) {
        return new Info(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
